Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000 
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000 
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business =10000  (pk)
ii. Hours = 1562	(fk)
iii. Category = 2643 (fk)
iv. Attribute = 1115 (fk)
v. Review = 10000(pk)
vi. Checkin = 493(fk)
vii. Photo =10000(pk)
viii. Tip = 3979 (fk-business_id)
ix. User = 10000(pk)
x. Friend = 11(fk-user_id)
xi. Elite_years =2780 (fk-user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	SELECT * FROM USER
	WHERE name IS NULL OR review_count IS NULL OR yelping_since IS NULL
	OR useful IS NULL OR funny IS NULL OR cool IS NULL OR fans IS NULL OR
	average_stars IS NULL OR compliment_hot IS NULL OR compliment_more IS NULL OR
	compliment_profile IS NULL OR compliment_cute IS NULL OR compliment_list IS NULL
	OR compliment_note IS NULL OR compliment_plain IS NULL OR compliment_cool IS NULL
	OR compliment_funny IS NULL OR compliment_writer IS NULL OR compliment_photos IS NULL;
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000 		avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT  CITY,COUNT(R.ID) 
	FROM BUSINESS B
	INNER JOIN REVIEW R ON B.ID= R.business_id
	GROUP BY CITY
	ORDER BY COUNT(R.ID) DESC;
	
	Copy and Paste the Result Below:
	
	+-----------------+-------------+
| city            | COUNT(R.ID) |
+-----------------+-------------+
| Las Vegas       |         193 |
| Phoenix         |          65 |
| Toronto         |          51 |
| Scottsdale      |          37 |
| Henderson       |          30 |
| Tempe           |          28 |
| Pittsburgh      |          23 |
| Chandler        |          22 |
| Charlotte       |          21 |
| Montréal        |          18 |
| Madison         |          16 |
| Gilbert         |          13 |
| Mesa            |          13 |
| Cleveland       |          12 |
| North Las Vegas |           6 |
| Edinburgh       |           5 |
| Glendale        |           5 |
| Lakewood        |           5 |
| Cave Creek      |           4 |
| Champaign       |           4 |
| Markham         |           4 |
| North York      |           4 |
| Mississauga     |           3 |
| Surprise        |           3 |
| Avondale        |           2 |
+-----------------+-------------+
(Output limit exceeded, 25 of 67 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SELECT  city,stars AS star_rating, count(stars) AS count
FROM  BUSINESS
where city="Avon";


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+------+-------------+-------+
| city | star_rating | count |
+------+-------------+-------+
| Avon |         4.0 |    10 |
+------+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:
SELECT  city,stars AS star_rating, count(stars) AS count
FROM  BUSINESS
where city="Beachwood" 


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-----------+-------------+-------+
| city      | star_rating | count |
+-----------+-------------+-------+
| Beachwood |         5.0 |    14 |
+-----------+-------------+-------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	SELECT name, review_count
	from user 
	order by  review_count desc
	LIMIT 3;
		
	Copy and Paste the Result Below:
		+--------+--------------+
		| name   | review_count |
		+--------+--------------+
		| Gerald |         2000 |
		| Sara   |         1629 |
		| Yuri   |         1339 |
		+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	no, as the user with most fans doesn't have larest review_count 
	which indicates they aren't correlated 
	SELECT name, review_count, fans
	from user 
	order by  fans desc
	LIMIT 10;
	+-----------+--------------+------+
	| name      | review_count | fans |
	+-----------+--------------+------+
	| Amy       |          609 |  503 |
	| Mimi      |          968 |  497 |
	| Harald    |         1153 |  311 |
	| Gerald    |         2000 |  253 |
	| Christine |          930 |  173 |
	| Lisa      |          813 |  159 |
	| Cat       |          377 |  133 |
	| William   |         1215 |  126 |
	| Fran      |          862 |  124 |
	| Lissa     |          834 |  120 |
	+-----------+--------------+------+
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	love 
	
	SQL code used to arrive at answer:
	SELECT count(*) FROM review where text like "%love%" ;
	+----------+
	| count(*) |
	+----------+
	|     1780 |
	+----------+
	SELECT count(*) FROM review where text like "%hate%" ;
	+----------+
	| count(*) |
	+----------+
	|      232 |
	+----------+
		
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT name,  fans
	from user 
	order by  fans desc
	LIMIT 10;
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
	There is a little difference in hours distiribution between 2 and 5 stars in Restaurants category, almost the same
	SELECT city, category,stars,hours from business
	inner join category on  category.business_id=business.id
	inner join hours h on h.business_id=business.id
	where category="Restaurants" AND stars in(2,5)
	group by stars
	+---------+-------------+-------+----------------------+
	| city    | category    | stars | hours                |
	+---------+-------------+-------+----------------------+
	| Toronto | Restaurants |   2.0 | Saturday|11:00-23:00 |
	| Mesa    | Restaurants |   5.0 | Saturday|10:30-22:00 |
	+---------+-------------+-------+----------------------+

ii. Do the two groups you chose to analyze have a different number of reviews?
         yes they have different number of review counts as the one with 2 stars have onl 5 reviews while the one with 5 stars have 267 reviews
	SELECT city, category,stars,review_count from business
	inner join category on  category.business_id=business.id
	inner join hours h on h.business_id=business.id
	where category="Restaurants" AND stars in(2,5)
	group by stars
	+---------+-------------+-------+--------------+
	| city    | category    | stars | review_count |
	+---------+-------------+-------+--------------+
	| Toronto | Restaurants |   2.0 |            5 |
	| Mesa    | Restaurants |   5.0 |          267 |
	+---------+-------------+-------+--------------+
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	No
SQL code used for analysis:
//indicating difference of categories number

SELECT name,count(category),is_open from business b
inner join category on category.business_id=b.id
group by is_open

//indicating difference of reviews count
SELECT name,Sum(review_count),is_open from business b
inner join category on category.business_id=b.id
group by is_open


2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         the open bussinesses have more categories than the closed one
         
ii. Difference 2:
          the open bussinesses has far more review count than the closed one
         
         
SQL code used for analysis:

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
   predicting number of fans user will have 
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
       I want to use friend, elite_years along with user table to indicate what attributes play a role in user's number of fans                   
       It seems like review_count doesn't colerate with number of fans, and number of friends also as the users with most number of fans doesn't have friends
       users with active years more than 10 have better chance to have more number of fans
iii. Output of your finished dataset:
	+-----------+--------------+------+--------------+-----------+
| name      | active_years | fans | review_count | friend_id |
+-----------+--------------+------+--------------+-----------+
| Amy       |           16 |  503 |          609 |      None |
| Mimi      |           12 |  497 |          968 |      None |
| Harald    |           11 |  311 |         1153 |      None |
| Gerald    |           11 |  253 |         2000 |      None |
| Christine |           14 |  173 |          930 |      None |
| Lisa      |           14 |  159 |          813 |      None |
| Cat       |           14 |  133 |          377 |      None |
| William   |            8 |  126 |         1215 |      None |
| Fran      |           11 |  124 |          862 |      None |
| Lissa     |           16 |  120 |          834 |      None |
| Mark      |           14 |  115 |          861 |      None |
| Tiffany   |           15 |  111 |          408 |      None |
| bernice   |           16 |  105 |          255 |      None |
| Roanna    |           17 |  104 |         1039 |      None |
| Angela    |           13 |  101 |          694 |      None |
| .Hon      |           17 |  101 |         1246 |      None |
| Ben       |           16 |   96 |          307 |      None |
| Linda     |           18 |   89 |          584 |      None |
| Christina |           11 |   85 |          842 |      None |
| Jessica   |           14 |   84 |          220 |      None |
| Greg      |           15 |   81 |          408 |      None |
| Nieves    |           10 |   80 |          178 |      None |
| Sui       |           14 |   78 |          754 |      None |
| Yuri      |           15 |   76 |         1339 |      None |
| Nicole    |           14 |   73 |          161 |      None |
+-----------+--------------+------+--------------+-----------+
iv. Provide the SQL code you used to create your final dataset:
         SELECT  name,compliment_hot,fans,review_count
	from user
	order by fans desc

//friends
	SELECT  DISTINCT(name),compliment_hot,fans,review_count,friend_id
	from user
	LEFT join friend on friend.user_id=user.id
	order by fans desc
//Active years
	SELECT  DISTINCT(name),DATE("NOW")-yelping_since active_years,fans,review_count,friend_id
	from user
	LEFT join friend on friend.user_id=user.id
	order by fans desc
         